/*
 * Problem: Binary Tree Level Order Traversal (LeetCode #102)
 *
 * Description:
 * Given the root of a binary tree, return the level order traversal of its nodes' values.
 * (i.e., from left to right, level by level).
 *
 * Approach:
 * - Use a Queue to perform Breadth-First Search (BFS).
 * - For each level, process all nodes currently in the queue.
 * - Add their children to the queue for the next level.
 *
 * Time Complexity: O(n), where n is the number of nodes in the tree.
 * Space Complexity: O(n) for the output list and queue.
 *
 * Author: [Your Name]
 * Date: [Date]
 */

import java.util.*;

// Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode() {}

    TreeNode(int val) {
        this.val = val;
    }

    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

public class Solution {

    /**
     * Performs level-order traversal on the given binary tree.
     *
     * @param root The root of the binary tree.
     * @return A list of lists, where each inner list contains values at each level.
     */
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) return ans;

        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);

        while (!q.isEmpty()) {
            int size = q.size();
            List<Integer> level = new ArrayList<>();

            for (int i = 0; i < size; i++) {
                TreeNode node = q.poll();
                level.add(node.val);
                if (node.left != null) q.add(node.left);
                if (node.right != null) q.add(node.right);
            }

            ans.add(level); // Add the current level after processing
        }

        return ans;
    }

    /**
     * Main method for testing the levelOrder method.
     */
    public static void main(String[] args) {
        // Sample binary tree:
        //         1
        //       /   \
        //      2     3
        //     / \     \
        //    4   5     6

        TreeNode root = new TreeNode(1,
                            new TreeNode(2,
                                new TreeNode(4),
                                new TreeNode(5)),
                            new TreeNode(3,
                                null,
                                new TreeNode(6)));

        Solution sol = new Solution();
        List<List<Integer>> result = sol.levelOrder(root);

        // Print the result
        System.out.println("Level Order Traversal:");
        for (List<Integer> level : result) {
            System.out.println(level);
        }
    }
}
